// ======= –ë–∞—Ä–ª—ã“õ –∫–æ–¥ –±—ñ—Ä —Ñ–∞–π–ª–¥–∞ =======
interface Beverage {
    String getDescription();
    double cost();
}

// ======= –ù–µ–≥—ñ–∑–≥—ñ —Å—É—Å—ã–Ω–¥–∞—Ä =======
class Espresso implements Beverage {
    public String getDescription() {
        return "–≠—Å–ø—Ä–µ—Å—Å–æ";
    }

    public double cost() {
        return 500;
    }
}

class Tea implements Beverage {
    public String getDescription() {
        return "–®–∞–π";
    }

    public double cost() {
        return 300;
    }
}

class Latte implements Beverage {
    public String getDescription() {
        return "–õ–∞—Ç—Ç–µ";
    }

    public double cost() {
        return 600;
    }
}

// ======= –ê–±—Å—Ç—Ä–∞–∫—Ç—Ç—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä =======
abstract class BeverageDecorator implements Beverage {
    protected Beverage beverage;

    public BeverageDecorator(Beverage beverage) {
        this.beverage = beverage;
    }

    public String getDescription() {
        return beverage.getDescription();
    }

    public double cost() {
        return beverage.cost();
    }
}

// ======= “ö–æ—Å–ø–∞–ª–∞—Ä =======
class Milk extends BeverageDecorator {
    public Milk(Beverage beverage) {
        super(beverage);
    }

    public String getDescription() {
        return beverage.getDescription() + ", —Å“Ø—Ç";
    }

    public double cost() {
        return beverage.cost() + 100;
    }
}

class Sugar extends BeverageDecorator {
    public Sugar(Beverage beverage) {
        super(beverage);
    }

    public String getDescription() {
        return beverage.getDescription() + ", “õ–∞–Ω—Ç";
    }

    public double cost() {
        return beverage.cost() + 50;
    }
}

class WhippedCream extends BeverageDecorator {
    public WhippedCream(Beverage beverage) {
        super(beverage);
    }

    public String getDescription() {
        return beverage.getDescription() + ", –∫—Ä–µ–º";
    }

    public double cost() {
        return beverage.cost() + 150;
    }
}

class Syrup extends BeverageDecorator {
    public Syrup(Beverage beverage) {
        super(beverage);
    }

    public String getDescription() {
        return beverage.getDescription() + ", —Å–∏—Ä–æ–ø";
    }

    public double cost() {
        return beverage.cost() + 120;
    }
}

// ======= –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç”©–ª–µ–º –∂“Ø–π–µ—Å—ñ “Ø—à—ñ–Ω =======
interface IPaymentProcessor {
    void processPayment(double amount);
}

// ======= PayPal –∂“Ø–π–µ—Å—ñ =======
class PayPalPaymentProcessor implements IPaymentProcessor {
    public void processPayment(double amount) {
        System.out.println("PayPal –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ–º –∂–∞—Å–∞–ª–¥—ã: " + amount + " —Ç–≥");
    }
}

// ======= Stripe –∂“Ø–π–µ—Å—ñ (—Å—ã—Ä—Ç“õ—ã) =======
class StripePaymentService {
    public void makeTransaction(double totalAmount) {
        System.out.println("Stripe –∂“Ø–π–µ—Å—ñ–º–µ–Ω —Ç”©–ª–µ–º ”©—Ç—Ç—ñ: " + totalAmount + " —Ç–≥");
    }
}

// ======= Stripe –∞–¥–∞–ø—Ç–µ—Ä—ñ =======
class StripePaymentAdapter implements IPaymentProcessor {
    private StripePaymentService stripeService;

    public StripePaymentAdapter(StripePaymentService stripeService) {
        this.stripeService = stripeService;
    }

    public void processPayment(double amount) {
        stripeService.makeTransaction(amount);
    }
}

// ======= KaspiPay –∂“Ø–π–µ—Å—ñ (–±–∞—Å“õ–∞ —Å—ã—Ä—Ç“õ—ã –∂“Ø–π–µ) =======
class KaspiPayService {
    public void sendPayment(double money) {
        System.out.println("KaspiPay –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ–º –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: " + money + " —Ç–≥");
    }
}

// ======= KaspiPay –∞–¥–∞–ø—Ç–µ—Ä—ñ =======
class KaspiPayAdapter implements IPaymentProcessor {
    private KaspiPayService kaspiService;

    public KaspiPayAdapter(KaspiPayService kaspiService) {
        this.kaspiService = kaspiService;
    }

    public void processPayment(double amount) {
        kaspiService.sendPayment(amount);
    }
}

// ======= –ù–µ–≥—ñ–∑–≥—ñ –∫–ª–∞—Å—Å (main) =======
public class Main{
    public static void main(String[] args) {
        System.out.println("=== ‚òï –ö–ê–§–ï–î–ï–ì–Ü –¢–ê–ü–°–´–†–´–°–¢–ê–† (–î–µ–∫–æ—Ä–∞—Ç–æ—Ä) ===");

        Beverage order1 = new Espresso();
        order1 = new Milk(order1);
        order1 = new Sugar(order1);
        System.out.println(order1.getDescription() + " => –ë–∞“ì–∞: " + order1.cost() + " —Ç–≥");

        Beverage order2 = new Latte();
        order2 = new Syrup(order2);
        order2 = new WhippedCream(order2);
        System.out.println(order2.getDescription() + " => –ë–∞“ì–∞: " + order2.cost() + " —Ç–≥");

        Beverage order3 = new Tea();
        order3 = new Sugar(order3);
        System.out.println(order3.getDescription() + " => –ë–∞“ì–∞: " + order3.cost() + " —Ç–≥");

        System.out.println("\n=== üí≥ –¢”®–õ–ï–ú –ñ“Æ–ô–ï–°–Ü (–ê–¥–∞–ø—Ç–µ—Ä) ===");

        IPaymentProcessor paypal = new PayPalPaymentProcessor();
        IPaymentProcessor stripe = new StripePaymentAdapter(new StripePaymentService());
        IPaymentProcessor kaspi = new KaspiPayAdapter(new KaspiPayService());

        paypal.processPayment(650);
        stripe.processPayment(870);
        kaspi.processPayment(350);

        System.out.println("\n–ë–∞—Ä–ª—ã“õ —Ç”©–ª–µ–º —Å”ô—Ç—Ç—ñ –∞—è“õ—Ç–∞–ª–¥—ã ‚úÖ");
    }
}
